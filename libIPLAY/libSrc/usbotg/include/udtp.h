
#ifndef __UDTP_H__
#define __UDTP_H__
#include"utilTypeDef.h"


#define SYNC0 0xA5
#define SYNC1 0x5A

typedef enum _UDTP_DEVICE_TYPE {

	UDTP_DEVICE_NONE,      
	UDTP_DEVICE_TEST,      

	UDTP_DEVICE_LINUX_800x480x16,      
	UDTP_DEVICE_LINUX_800x480x24,      
	UDTP_DEVICE_LINUX_800x480x32, 

	UDTP_DEVICE_WINCE_800x480x16,
	UDTP_DEVICE_WINCE_800x480x24,
	UDTP_DEVICE_WINCE_800x480x32,

	UDTP_DEVICE_MAGICPIXEL_800x480x16,
	UDTP_DEVICE_MAGICPIXEL_800x480x24,
	UDTP_DEVICE_MAGICPIXEL_800x480x32,

	UDTP_DEVICE_LINUX_800x600x16,      
	UDTP_DEVICE_LINUX_800x600x24,      
	UDTP_DEVICE_LINUX_800x600x32, 

	UDTP_DEVICE_WINCE_800x600x16,
	UDTP_DEVICE_WINCE_800x600x24,
	UDTP_DEVICE_WINCE_800x600x32,

	UDTP_DEVICE_MAGICPIXEL_800x600x16,
	UDTP_DEVICE_MAGICPIXEL_800x600x24,
	UDTP_DEVICE_MAGICPIXEL_800x600x32,

	UDTP_DEVICE_WINCE_1024x768x16,
	UDTP_DEVICE_WINCE_1024x768x24,
	UDTP_DEVICE_WINCE_1024x768x32,

	UDTP_DEVICE_MAGICPIXEL_1024x600x16, // aks for magic pixel
	UDTP_DEVICE_MAGICPIXEL_1024x600x24,
	UDTP_DEVICE_MAGICPIXEL_1024x600x32,
	
	UDTP_DEVICE_TEST_480x234x24,  //date 23January 2009
} UDTP_DEVICE_TYPE;

typedef enum _UDTP_DEVICE_PROTOCOL {
     	
	UDTP_PROTOCOL_RAW = 0,      
	UDTP_PROTOCOL_RAW_RASTER,   
	UDTP_PROTOCOL_RLE_OLD,
	UDTP_PROTOCOL_RLE_BITARRAY,
	UDTP_PROTOCOL_JPEG,
	UDTP_PROTOCOL_CONTROL_BRIGHTNESS,
	UDTP_PROTOCOL_CONTROL_UPDATE,

} UDTP_DEVICE_PROTOCOL;

// request type (1=class, 2=vendor)
typedef enum _UDTP_REQUEST_TYPE {

	UDTP_REQUEST_CLASS=1,       
	UDTP_REQUEST_VENDOR

} UDTP_PROTOCOL;

// transfer direction (0=host to device, 1=device to host)
typedef enum _UDTP_REQUEST_DIRECTION {

	UDTP_DIRECTION_HOST_TO_DEVICE,       
	UDTP_DIRECTION_DEVICE_TO_HOST

} UDTP_REQUEST_DIRECTION;

// recipient (0=device,1=interface,2=endpoint,3=other)
typedef enum _UDTP_REQUEST_RECIPIENT {

	UDTP_RECIPIENT_DEVICE,       
	UDTP_RECIPIENT_INTERFACE,
	UDTP_RECIPIENT_ENDPOINT,
	UDTP_RECIPIENT_OTHER

} UDTP_REQUEST_RECIPIENT;

typedef enum _UDTP_DEVICE_REQUEST {

	UDTP_DEVICE_REQUEST_NONE,       
	UDTP_DEVICE_REQUEST_GET_DEVICE_INFO,
	UDTP_DEVICE_REQUEST_GET_BRIGHRNESS,
	UDTP_DEVICE_REQUEST_SET_BRIGHRNESS,
	UDTP_DEVICE_REQUEST_GET_STATE,
	UDTP_DEVICE_REQUEST_MINIMO_TO_MASS,
	UDTP_DEVICE_REQUEST_GET_SIDEBAR_STATE,
	UDTP_DEVICE_REQUEST_SET_SIDEBAR_STATE,
	
} UDTP_DEVICE_REQUEST;


typedef enum _DEVICE_STATE { 
	DeviceStateUnknown, 
	DeviceStateMassStorage, 
	DeviceStateSelector, 
	DeviceStateMiniMonitor,
	DeviceStateRssReader,

} UDTP_DEVICE_STATE, *PDEVICE_STATE;

typedef struct _UDTP_DEVICE_STATUS {

	BYTE DeviceAttached;
	BYTE DeviceState;
	BYTE Device8inch; // aks 24 oct for 8 inch device connect.
	BYTE VideoSleepMode; //this is required bcos reg- binary data types required data to be writen in pairs of bytes
	BYTE SideBarState; //Added for displaying side bar on pressing of GPIO keys in mini-monitor mode

} UDTP_DEVICE_STATUS, *PUDTP_DEVICE_STATUS;
//Added for informing host about GPIO key press in mini-monitor mode
typedef struct _UDTP_DEVICE_SIDEBAR_STATUS {

	BYTE SideBarState;
	BYTE Reserved;

} UDTP_DEVICE_SIDEBAR_STATUS;

typedef struct _UDTP_DEVICE_INFO {

	BYTE DeviceType;
	BYTE DeviceProtocol;

} UDTP_DEVICE_INFO, *PUDTP_DEVICE_INFO;

typedef struct _UDTP_PROTOCOL_PACKET {

	BYTE bSync0;
	BYTE bSync1;
	BYTE bDeviceType;
	BYTE bProtocol;
	DWORD dwTotalLength;
	BYTE bBrightness;
	BYTE Reserved1;
	BYTE Reserved2;
	BYTE Reserved3;
	
} UDTP_PROTOCOL_PACKET, *PUDTP_PROTOCOL_PACKET;

typedef struct _UDTP_VENDOR_OR_CLASS_REQUEST
{
	BYTE direction;
	BYTE requestType;
	BYTE recepient;
	BYTE request;
	WORD value;
	WORD index;

} UDTP_VENDOR_OR_CLASS_REQUEST, *PUDTP_VENDOR_OR_CLASS_REQUEST;

typedef struct _RECTAREA
{
	DWORD    left;
	DWORD    top;
	DWORD    right;
	DWORD    bottom;

} RECTAREA, *PRECTAREA;

typedef struct _UDTP_BLIT_CONTROL {

	WORD PipeNum;
	void *pDataBuffer;

} UDTP_BLIT_CONTROL, *PUDTP_BLIT_CONTROL;
typedef enum _DEVICE_USB_COMMAND
{
	COMMAND_FRAME_MANAGER_START  = 0XE0,
	COMMAND_FRAME_MANAGER_EXIT   = 0XF0,
	COMMAND_DEVICE_STATE_SELECTOR = 0xfa,
	COMMAND_MASS_STORAGE = 0xfb,
	COMMAND_BRIGHTNESS   = 0xfc,
	COMMAND_UPDATE_FIRMWARE = 0xfd,
	COMMAND_MINIMONITOR  = 0xfe,
	COMMAND_FIRSTTIME_PLUG = 0xff
	
		
} DEVICE_USB_COMMAND;
/* Sets the message queue size of FRAME_DECODE_START_ID message queue */
#define MINIMO_MESSAGEQUEUE_SIZE	256
#endif
